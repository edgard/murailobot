name: Automated Release

on:
  push:
    branches:
      - master

permissions:
  contents: write
  packages: write

jobs:
  auto-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: patch
          release_branches: master

      - name: Verify tag
        run: |
          git fetch --tags
          CURRENT_TAG=${{ steps.tag_version.outputs.new_tag }}
          CURRENT_COMMIT=$(git rev-parse HEAD)
          TAG_COMMIT=$(git rev-list -n 1 $CURRENT_TAG || echo "")

          echo "Current Tag: $CURRENT_TAG"
          echo "Current Commit: $CURRENT_COMMIT"
          echo "Tag Commit: $TAG_COMMIT"

          if [ "$TAG_COMMIT" != "$CURRENT_COMMIT" ]; then
            echo "Tag $CURRENT_TAG was not properly attached to current commit $CURRENT_COMMIT"
            exit 1
          fi

      - name: Set environment variables for GoReleaser
        run: |
          echo "GITHUB_REPOSITORY_OWNER=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 1)" >> $GITHUB_ENV
          echo "GITHUB_REPOSITORY_NAME=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 2)" >> $GITHUB_ENV

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
