package db

import (
	"context"
	"fmt"
	"strconv"
	"time"

	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"
)

// New creates a new SQLite database connection with optimized settings.
// If no configuration is provided, it uses default values optimized for
// chat history storage.
//
// The function:
//  1. Configures SQLite with Write-Ahead Logging (WAL)
//  2. Sets up connection pooling and timeouts
//  3. Initializes the database schema
//  4. Configures query logging (disabled by default)
//
// Parameters:
//   - cfg: Optional configuration for fine-tuning database behavior
//
// Returns an error if database initialization or migration fails.
func New(cfg *Config) (*SQLiteDB, error) {
	if cfg == nil {
		cfg = &Config{
			TempStore:   defaultTempStore,
			CacheSizeKB: defaultCacheSizeKB,
			OpTimeout:   defaultOpTimeout,
		}
	}

	gormCfg := &gorm.Config{
		Logger: logger.Default.LogMode(logger.Silent),
	}

	// Configure SQLite with optimized settings:
	// - WAL journal mode for better concurrency
	// - Busy timeout to handle concurrent access
	// - Memory-based temp store for better performance
	// - Configured page cache size
	dsn := "storage.db?_journal=WAL" +
		"&_timeout=" + strconv.Itoa(defaultDSNTimeout) +
		"&_temp_store=" + cfg.TempStore +
		"&_cache_size=-" + strconv.Itoa(cfg.CacheSizeKB)

	db, err := gorm.Open(sqlite.Open(dsn), gormCfg)
	if err != nil {
		return nil, fmt.Errorf("failed to open database: %w", err)
	}

	sqlDB, err := db.DB()
	if err != nil {
		return nil, fmt.Errorf("failed to get database instance: %w", err)
	}

	sqlDB.SetMaxOpenConns(defaultMaxOpenConn)

	if err := db.AutoMigrate(&ChatHistory{}); err != nil {
		return nil, fmt.Errorf("failed to run migrations: %w", err)
	}

	return &SQLiteDB{
		db:  db,
		cfg: cfg,
	}, nil
}

// GetRecent retrieves the most recent chat history entries, ordered by timestamp.
// It enforces a timeout through context to prevent long-running queries.
//
// Parameters:
//   - ctx: Context for timeout/cancellation
//   - limit: Maximum number of entries to retrieve
//
// Returns the chat history entries or an error if the query fails.
func (d *SQLiteDB) GetRecent(ctx context.Context, limit int) ([]ChatHistory, error) {
	var history []ChatHistory

	timeoutCtx, cancel := context.WithTimeout(ctx, d.cfg.OpTimeout)
	defer cancel()

	if err := d.db.WithContext(timeoutCtx).
		Order("timestamp desc").
		Limit(limit).
		Find(&history).Error; err != nil {
		return nil, fmt.Errorf("failed to get recent history: %w", err)
	}

	return history, nil
}

// Save stores a new chat interaction in the database.
// It creates a new record with the current UTC timestamp and
// enforces a timeout through context.
//
// Parameters:
//   - ctx: Context for timeout/cancellation
//   - userID: Telegram user identifier
//   - userName: User's display name
//   - userMsg: The message sent by the user
//   - botMsg: The response generated by the bot
//
// Returns an error if the save operation fails.
func (d *SQLiteDB) Save(ctx context.Context, userID int64, userName string, userMsg, botMsg string) error {
	history := ChatHistory{
		UserID:    userID,
		UserName:  userName,
		UserMsg:   userMsg,
		BotMsg:    botMsg,
		Timestamp: time.Now().UTC(),
	}

	timeoutCtx, cancel := context.WithTimeout(ctx, d.cfg.OpTimeout)
	defer cancel()

	if err := d.db.WithContext(timeoutCtx).Create(&history).Error; err != nil {
		return fmt.Errorf("failed to save chat history: %w", err)
	}

	return nil
}

// DeleteAll removes all chat history entries from the database.
// This is an administrative operation that should be used with caution.
// It enforces a timeout through context to prevent long-running operations.
//
// Parameters:
//   - ctx: Context for timeout/cancellation
//
// Returns an error if the deletion fails.
func (d *SQLiteDB) DeleteAll(ctx context.Context) error {
	timeoutCtx, cancel := context.WithTimeout(ctx, d.cfg.OpTimeout)
	defer cancel()

	if err := d.db.WithContext(timeoutCtx).Session(&gorm.Session{AllowGlobalUpdate: true}).Delete(&ChatHistory{}).Error; err != nil {
		return fmt.Errorf("failed to delete all history: %w", err)
	}

	return nil
}

// Close properly closes the database connection.
// This should be called during application shutdown to ensure
// all pending operations are completed and resources are released.
//
// Returns an error if closing the connection fails.
func (d *SQLiteDB) Close() error {
	sqlDB, err := d.db.DB()
	if err != nil {
		return fmt.Errorf("failed to get database instance: %w", err)
	}

	if err := sqlDB.Close(); err != nil {
		return fmt.Errorf("failed to close database: %w", err)
	}

	return nil
}
